continue
Date.strptime("01.15.1995", "%M.%d.%Y")
Date.strptime("01.15.1995", "%m.%d.%Y")
"1.15.1995".split('.')
Date.strptime("1.15.1995", "%m.%d.%Y")
Date.strptime("1.15/1995", "%m.%d.%Y")
Date.parse('15.1.1995')
Date.parse('01.15.1995')
Date.parse('1.15.1995')
people
continue
@data
continue
@data
@dat
exit
end
  end
    CSV.parse(data, headers: true, col_sep: @separator)
  def parsed_csv
  private
  end
    end
      )
        birthday: row['birthday']
        city: row['city'],
        last_name: row['last_name'],
        first_name: row['first_name'],
      Person.new(
    parsed_csv.map do |row|
  def call
  end
    @separator = separator
    @data = data
  def initialize(data:, separator:)
class PeopleParser
# frozen_string_literal: true
require 'CSV'
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).map { |row| { first_name: row['first_name'] } }
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).map { |row| { first_name: row.first_name } }
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).map { |row| { first_name: row[:first_name] } }
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).map { |row| { first_name: row[:first_name] }
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).map { |row| { first_name: row[:first_name} }
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).map { |row| row }
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true)
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).to_h
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).as_json
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).first.as_json
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true).first
CSV.parse(params[:dollar_format], col_sep: ' $ ', headers: true)
CSV.parse(params[:dollar_format], col_sep: ' $ ')
CSV.parse(params[:dollar_format], col_sep: '$')
CSV.parse(params[:dollar_format])
require 'CSV'
params[:dollar_format]
params
